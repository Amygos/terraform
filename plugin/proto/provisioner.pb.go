// Code generated by protoc-gen-go. DO NOT EDIT.
// source: provisioner.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ValidateProvisionerConfig struct {
}

func (m *ValidateProvisionerConfig) Reset()                    { *m = ValidateProvisionerConfig{} }
func (m *ValidateProvisionerConfig) String() string            { return proto1.CompactTextString(m) }
func (*ValidateProvisionerConfig) ProtoMessage()               {}
func (*ValidateProvisionerConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ValidateProvisionerConfig_Request struct {
	Config *DynamicValue `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *ValidateProvisionerConfig_Request) Reset()         { *m = ValidateProvisionerConfig_Request{} }
func (m *ValidateProvisionerConfig_Request) String() string { return proto1.CompactTextString(m) }
func (*ValidateProvisionerConfig_Request) ProtoMessage()    {}
func (*ValidateProvisionerConfig_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0}
}

func (m *ValidateProvisionerConfig_Request) GetConfig() *DynamicValue {
	if m != nil {
		return m.Config
	}
	return nil
}

type ValidateProvisionerConfig_Response struct {
	Diagnostics []*Diagnostic `protobuf:"bytes,15,rep,name=diagnostics" json:"diagnostics,omitempty"`
}

func (m *ValidateProvisionerConfig_Response) Reset()         { *m = ValidateProvisionerConfig_Response{} }
func (m *ValidateProvisionerConfig_Response) String() string { return proto1.CompactTextString(m) }
func (*ValidateProvisionerConfig_Response) ProtoMessage()    {}
func (*ValidateProvisionerConfig_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 1}
}

func (m *ValidateProvisionerConfig_Response) GetDiagnostics() []*Diagnostic {
	if m != nil {
		return m.Diagnostics
	}
	return nil
}

type ProvisionerApply struct {
}

func (m *ProvisionerApply) Reset()                    { *m = ProvisionerApply{} }
func (m *ProvisionerApply) String() string            { return proto1.CompactTextString(m) }
func (*ProvisionerApply) ProtoMessage()               {}
func (*ProvisionerApply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ProvisionerApply_Request struct {
	Config *DynamicValue `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *ProvisionerApply_Request) Reset()                    { *m = ProvisionerApply_Request{} }
func (m *ProvisionerApply_Request) String() string            { return proto1.CompactTextString(m) }
func (*ProvisionerApply_Request) ProtoMessage()               {}
func (*ProvisionerApply_Request) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *ProvisionerApply_Request) GetConfig() *DynamicValue {
	if m != nil {
		return m.Config
	}
	return nil
}

type ProvisionerApply_Response struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ProvisionerApply_Response) Reset()                    { *m = ProvisionerApply_Response{} }
func (m *ProvisionerApply_Response) String() string            { return proto1.CompactTextString(m) }
func (*ProvisionerApply_Response) ProtoMessage()               {}
func (*ProvisionerApply_Response) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

func (m *ProvisionerApply_Response) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto1.RegisterType((*ValidateProvisionerConfig)(nil), "proto.ValidateProvisionerConfig")
	proto1.RegisterType((*ValidateProvisionerConfig_Request)(nil), "proto.ValidateProvisionerConfig.Request")
	proto1.RegisterType((*ValidateProvisionerConfig_Response)(nil), "proto.ValidateProvisionerConfig.Response")
	proto1.RegisterType((*ProvisionerApply)(nil), "proto.ProvisionerApply")
	proto1.RegisterType((*ProvisionerApply_Request)(nil), "proto.ProvisionerApply.Request")
	proto1.RegisterType((*ProvisionerApply_Response)(nil), "proto.ProvisionerApply.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Provisioner service

type ProvisionerClient interface {
	ValidateProvisionerConfig(ctx context.Context, in *ValidateProvisionerConfig_Request, opts ...grpc.CallOption) (*ValidateProvisionerConfig_Response, error)
	Apply(ctx context.Context, in *ProvisionerApply_Request, opts ...grpc.CallOption) (Provisioner_ApplyClient, error)
	Stop(ctx context.Context, in *Stop_Request, opts ...grpc.CallOption) (*Stop_Response, error)
}

type provisionerClient struct {
	cc *grpc.ClientConn
}

func NewProvisionerClient(cc *grpc.ClientConn) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) ValidateProvisionerConfig(ctx context.Context, in *ValidateProvisionerConfig_Request, opts ...grpc.CallOption) (*ValidateProvisionerConfig_Response, error) {
	out := new(ValidateProvisionerConfig_Response)
	err := grpc.Invoke(ctx, "/proto.Provisioner/ValidateProvisionerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) Apply(ctx context.Context, in *ProvisionerApply_Request, opts ...grpc.CallOption) (Provisioner_ApplyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Provisioner_serviceDesc.Streams[0], c.cc, "/proto.Provisioner/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &provisionerApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provisioner_ApplyClient interface {
	Recv() (*ProvisionerApply_Response, error)
	grpc.ClientStream
}

type provisionerApplyClient struct {
	grpc.ClientStream
}

func (x *provisionerApplyClient) Recv() (*ProvisionerApply_Response, error) {
	m := new(ProvisionerApply_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *provisionerClient) Stop(ctx context.Context, in *Stop_Request, opts ...grpc.CallOption) (*Stop_Response, error) {
	out := new(Stop_Response)
	err := grpc.Invoke(ctx, "/proto.Provisioner/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Provisioner service

type ProvisionerServer interface {
	ValidateProvisionerConfig(context.Context, *ValidateProvisionerConfig_Request) (*ValidateProvisionerConfig_Response, error)
	Apply(*ProvisionerApply_Request, Provisioner_ApplyServer) error
	Stop(context.Context, *Stop_Request) (*Stop_Response, error)
}

func RegisterProvisionerServer(s *grpc.Server, srv ProvisionerServer) {
	s.RegisterService(&_Provisioner_serviceDesc, srv)
}

func _Provisioner_ValidateProvisionerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProvisionerConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).ValidateProvisionerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provisioner/ValidateProvisionerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).ValidateProvisionerConfig(ctx, req.(*ValidateProvisionerConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvisionerApply_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisionerServer).Apply(m, &provisionerApplyServer{stream})
}

type Provisioner_ApplyServer interface {
	Send(*ProvisionerApply_Response) error
	grpc.ServerStream
}

type provisionerApplyServer struct {
	grpc.ServerStream
}

func (x *provisionerApplyServer) Send(m *ProvisionerApply_Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Provisioner_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stop_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provisioner/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).Stop(ctx, req.(*Stop_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provisioner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateProvisionerConfig",
			Handler:    _Provisioner_ValidateProvisionerConfig_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Provisioner_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _Provisioner_Apply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "provisioner.proto",
}

func init() { proto1.RegisterFile("provisioner.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x50, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0xa5, 0xea, 0x56, 0x9d, 0x82, 0xba, 0x51, 0x64, 0xed, 0xc5, 0xd2, 0x53, 0x45, 0x28, 0xda,
	0x05, 0xaf, 0x22, 0x7a, 0xf4, 0x20, 0x11, 0xf6, 0x1e, 0xdb, 0xb8, 0x04, 0x6a, 0x26, 0x36, 0xa9,
	0xb0, 0x37, 0x3f, 0xc2, 0x0f, 0x16, 0xd3, 0xb4, 0x46, 0xa1, 0x22, 0x7b, 0x1a, 0xe6, 0xcd, 0x7b,
	0x6f, 0xde, 0x0c, 0x4c, 0x55, 0x83, 0x6f, 0x42, 0x0b, 0x94, 0xbc, 0xc9, 0x55, 0x83, 0x06, 0xc9,
	0xc4, 0x96, 0x78, 0xcf, 0x4e, 0xaa, 0x1e, 0x4e, 0x3f, 0x02, 0x38, 0x59, 0xb0, 0x5a, 0x54, 0xcc,
	0xf0, 0x87, 0x6f, 0xd1, 0x2d, 0xca, 0x67, 0xb1, 0x8c, 0xaf, 0x60, 0x9b, 0xf2, 0xd7, 0x96, 0x6b,
	0x43, 0xce, 0x21, 0x2c, 0x2d, 0x38, 0x0b, 0x92, 0x20, 0x8b, 0x8a, 0xc3, 0xce, 0x20, 0xbf, 0x5b,
	0x49, 0xf6, 0x22, 0xca, 0x05, 0xab, 0x5b, 0x4e, 0x1d, 0x25, 0xbe, 0x86, 0x1d, 0xca, 0xb5, 0x42,
	0xa9, 0x39, 0x99, 0x43, 0x54, 0x09, 0xb6, 0x94, 0xa8, 0x8d, 0x28, 0xf5, 0x6c, 0x3f, 0xd9, 0xcc,
	0xa2, 0x62, 0xda, 0xab, 0x87, 0x09, 0xf5, 0x59, 0xa9, 0x84, 0x03, 0x2f, 0xcd, 0x8d, 0x52, 0xf5,
	0x6a, 0xed, 0x30, 0xa9, 0x17, 0xe6, 0x18, 0x42, 0x6c, 0x8d, 0x6a, 0x8d, 0x15, 0xee, 0x52, 0xd7,
	0x15, 0xef, 0x1b, 0x10, 0x79, 0x0b, 0x89, 0xfa, 0xe3, 0x2b, 0x24, 0x73, 0xdb, 0x46, 0x19, 0xb9,
	0xcb, 0x19, 0x9f, 0xfd, 0x83, 0xe9, 0x92, 0xdd, 0xc3, 0xc4, 0x9e, 0x49, 0x4e, 0x9d, 0xe6, 0xf7,
	0xfd, 0x83, 0x69, 0x32, 0x4e, 0xe8, 0xbc, 0x2e, 0x02, 0x72, 0x09, 0x5b, 0x8f, 0x06, 0x15, 0xe9,
	0x1f, 0xf3, 0xd5, 0x0c, 0x06, 0x47, 0x3f, 0xc1, 0x4e, 0xf4, 0x14, 0x5a, 0x70, 0xfe, 0x19, 0x00,
	0x00, 0xff, 0xff, 0xb5, 0xe2, 0xd0, 0x46, 0x3c, 0x02, 0x00, 0x00,
}
